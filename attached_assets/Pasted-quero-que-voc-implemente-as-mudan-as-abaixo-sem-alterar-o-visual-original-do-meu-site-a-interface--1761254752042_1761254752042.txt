quero que você implemente as mudanças abaixo sem alterar o visual original do meu site (a interface deve ficar exatamente igual, só adicionar as funções):
	1.	Contexto importante:
Eu já criei o banco no Neon e as tabelas estão prontas (users e players) e meu usuário já foi inserido com a senha criptografada.
Então o backend não deve recriar o banco — apenas usar a DATABASE_URL (variável de ambiente) para se conectar ao Neon. Se for necessário inserir um usuário de exemplo, o chat só deve me pedir antes de executar.
	2.	Funcionalidades a adicionar:
	•	Adicionar um botão “Login” no canto superior direito (como um popup/modal ao clicar). O visual do site não muda — só adicionar esse botão discreto.
	•	Login será só meu: email rodriguesjair000@gmail.com. (A senha real já foi criptografada no banco; o backend deve verificar com bcrypt.compare.)
	•	Ao logar, o frontend deve carregar os jogadores do meu usuário (rota do backend: GET /players/:userId) e sincronizar alterações com o Neon.
	•	Cada jogador deve ter:
	•	um botão “X” para marcar ausente (não deleta, apenas muda present = false no banco via PATCH /players/:id);
	•	um ícone 🗑️ para deletar definitivamente (DELETE /players/:id).
	•	O botão Adicionar jogador continua, mas só adiciona quando estiver logado (envia POST /players com userId).
	•	A ação Copiar times deve copiar o texto sem as estrelas (⭐) — as estrelas continuam visíveis só na UI, mas não vão no texto copiado.
	3.	Backend (separado)
	•	Fazer um backend Node + Express pronto para deploy no Render. Usar pg, express, bcryptjs, cors, dotenv.
	•	O backend deve usar a variável de ambiente DATABASE_URL para conectar ao Neon (não embutir credenciais no código).
	•	Rotas exigidas:
	•	POST /login  — recebe {email,password}, valida com bcrypt e retorna { success:true, userId }.
	•	GET /players/:userId — retorna jogadores do usuário.
	•	POST /players — cria jogador { userId, name }.
	•	PATCH /players/:id — atualiza present.
	•	DELETE /players/:id — remove jogador.
	•	GET / — rota teste.
	•	GET /_debug/db — rota temporária para retornar info do DB e primeiros registros (para debug).
	•	package.json deve conter "type": "module" e start: node index.js.
	4.	Frontend
	•	O visual deve permanecer idêntico. Só:
	•	Adicionar o botão “Login” no canto superior direito; ao clicar abre popup para email+senha.
	•	Quando logar com sucesso, substituir botão por “Sair” (logout limpa estado local).
	•	Ao logar, carregar jogadores do backend automaticamente.
	•	Ao clicar “X” alterar present no backend; ao clicar 🗑️ deletar.
	•	Ao copiar times, remover estrelas do texto copiado.
	5.	Deploy / variáveis
	•	Explicar que a DATABASE_URL ficará no Render como env var e o frontend apontará para a URL do backend (por exemplo https://seu-backend.onrender.com).
	•	NÃO incluir a connection string real no código — usar placeholders e instruções pra colocar no Render.
	6.	Observações finais
	•	NÃO mudar layout, estilos ou nomes visuais — só adicionar as funcionalidades.
	•	Quando terminar, gere apenas os arquivos que preciso trocar: backend/index.js, backend/package.json e os trechos do frontend/src que foram alterados (por exemplo App.jsx e CSS caso necessário).
	•	Me peça confirmação antes de inserir qualquer usuário no banco — já tenho meu usuário lá. 


Eu ja coloquei a Variavel DATABASE_URL no secret aqui no replit(onde esta meu login)